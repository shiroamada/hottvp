<?php

namespace App\Models;

// ignore this user model, use AdminUser model instead in every scenario
// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, HasRoles, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'upline_agent_id',
        'hotcoin_balance',
        'total_profit_earned',
        'is_admin',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Get the upline agent for this user (if any).
     */
    public function uplineAgent()
    {
        return $this->belongsTo(User::class, 'upline_agent_id');
    }

    /**
     * Get the downline agents for this user.
     */
    public function downlineAgents()
    {
        return $this->hasMany(User::class, 'upline_agent_id');
    }

    /**
     * Get the activation codes generated by this user.
     */
    public function generatedActivationCodes()
    {
        return $this->hasMany(ActivationCode::class, 'generated_by_agent_id');
    }

    /**
     * Get the activation codes assigned to this user.
     */
    public function assignedActivationCodes()
    {
        return $this->hasMany(ActivationCode::class, 'assigned_to_agent_id');
    }

    /**
     * Get the activation codes activated by this user.
     */
    public function activatedActivationCodes()
    {
        return $this->hasMany(ActivationCode::class, 'activated_by_user_id');
    }

    /**
     * Get the hotcoin transactions for this user.
     */
    public function hotcoinTransactions()
    {
        return $this->hasMany(HotcoinTransaction::class, 'agent_id');
    }

    /**
     * Get the monthly profit records for this user.
     */
    public function monthlyProfits()
    {
        return $this->hasMany(AgentMonthlyProfit::class, 'agent_id');
    }

    public function getCostForPreset(ActivationCodePreset $preset)
    {
        // This is a placeholder. In a real application, you would have a table
        // that defines the cost of each preset for each agent level.
        // For now, we'll just return the default cost from the preset.
        return $preset->hotcoin_cost;
    }
}
